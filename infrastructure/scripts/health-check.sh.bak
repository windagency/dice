#!/bin/bash
set -e

echo "üé≤ DICE Development Environment Health Check üé≤"
echo "================================================="

# Backend API
echo "üöÄ Backend API Health:"
if docker ps --format "{{.Names}}" | grep -q "backend_dev"; then
    if response=$(docker exec backend_dev curl -s http://localhost:3001/health 2>/dev/null); then
        echo "$response" | jq -r '"‚úÖ \(.status) - \(.service) (uptime: \(.uptime)s)"'
    else
        echo "‚ùå Backend API is not responding"
    fi
else
    echo "‚ùå Backend container is not running"
fi

# PWA Frontend
echo "üé® PWA Frontend:"
if curl -s localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ PWA is responding"
else
    echo "‚ùå PWA is not responding"
fi

# Storybook Component Library
echo "üìö Storybook Component Library:"
if curl -s -I localhost:6006 | grep -q "HTTP/1.1 200 OK"; then
    echo "‚úÖ Storybook is running and accessible"
else
    echo "‚ùå Storybook is not responding"
fi

# PostgreSQL
echo "üóÑÔ∏è PostgreSQL Database:"
if docker compose exec -T postgres pg_isready -U dice_user -d dice_db > /dev/null 2>&1; then
    echo "‚úÖ PostgreSQL is ready"
else
    echo "‚ùå PostgreSQL is not ready"
fi

# Redis
echo "‚ö° Redis Cache:"
if docker compose exec -T redis redis-cli ping > /dev/null 2>&1; then
    echo "‚úÖ Redis is responding"
else
    echo "‚ùå Redis is not responding"
fi

# LocalStack
echo "‚òÅÔ∏è LocalStack (AWS Simulation):"
if curl -s localhost:4566/_localstack/health > /dev/null 2>&1; then
    echo "‚úÖ LocalStack is healthy"
    if command -v jq > /dev/null 2>&1; then
        available_services=$(curl -s localhost:4566/_localstack/health | jq -r '.services | to_entries | map(select(.value == "available")) | map(.key) | join(", ")')
        echo "   Available services: $available_services"
    fi
else
    echo "‚ùå LocalStack is not responding"
fi

# Temporal
echo "üåÄ Temporal Workflow Engine:"
if docker ps --format "{{.Names}}" | grep -q "backend_dev"; then
    if response=$(docker exec backend_dev curl -s http://localhost:3001/health/temporal 2>/dev/null); then
        status=$(echo "$response" | jq -r '.status // "unknown"')
        if [ "$status" = "ok" ]; then
            echo "‚úÖ Temporal is connected and healthy"
        else
            echo "‚ùå Temporal connection failed"
            echo "$response" | jq -r '"   Error: \(.error // "Unknown error")"'
        fi
    else
        if docker ps --filter name=backend_temporal --format "{{.Status}}" | grep -q "Up"; then
            echo "‚ö†Ô∏è  Temporal server is running but backend connection failed"
        else
            echo "‚ùå Temporal server is not running"
        fi
    fi
else
    echo "‚ùå Backend container is not running"
fi

# Temporal UI
echo "üñ•Ô∏è  Temporal Web UI:"
# Check if Temporal UI container is running first
if docker ps --filter name=dice_temporal_ui --format "{{.Status}}" | grep -q "Up"; then
    # Try to access the UI with a simple HTTP check (macOS compatible)
    if curl -s -m 5 -o /dev/null -w "%{http_code}" http://localhost:8088 | grep -q "200\|302\|404"; then
        echo "‚úÖ Temporal UI is responding"
    else
        echo "‚ö†Ô∏è  Temporal UI container running but not accessible"
    fi
else
    echo "‚ùå Temporal UI container is not running"
fi

# Traefik
echo "üåê Traefik Proxy:"
if docker ps --filter name=dice_traefik --format "{{.Status}}" | grep -q "Up"; then
    echo "‚úÖ Traefik container is running"  
    # Check if Traefik dashboard is accessible
    if curl -s http://localhost:8080/dashboard/ > /dev/null 2>&1; then
        echo "   ‚úÖ Traefik dashboard accessible"
    else
        echo "   ‚ö†Ô∏è  Traefik dashboard not accessible"
    fi
else
    echo "‚ùå Traefik container is not running"
fi

echo "================================================="

# Summary with comprehensive health check
all_healthy=true
backend_healthy=false
pwa_healthy=false
storybook_healthy=false
postgres_healthy=false
redis_healthy=false
localstack_healthy=false
temporal_backend_healthy=false
temporal_ui_healthy=false
traefik_healthy=false

# Check each service
if curl -s localhost:3001/health > /dev/null 2>&1; then backend_healthy=true; fi
if curl -s localhost:3000 > /dev/null 2>&1; then pwa_healthy=true; fi
if curl -s -I localhost:6006 | grep -q "HTTP/1.1 200 OK"; then storybook_healthy=true; fi
if docker compose exec -T postgres pg_isready -U dice_user -d dice_db > /dev/null 2>&1; then postgres_healthy=true; fi
if docker compose exec -T redis redis-cli ping > /dev/null 2>&1; then redis_healthy=true; fi
if curl -s localhost:4566/_localstack/health > /dev/null 2>&1; then localstack_healthy=true; fi
if docker ps --filter name=dice_traefik --format "{{.Status}}" | grep -q "Up"; then traefik_healthy=true; fi

# Check Temporal health through backend API
if response=$(curl -s localhost:3001/health/temporal 2>/dev/null); then
    status=$(echo "$response" | jq -r '.status // "unknown"')
    if [ "$status" = "ok" ]; then temporal_backend_healthy=true; fi
fi

# Check Temporal UI
if docker ps --filter name=dice_temporal_ui --format "{{.Status}}" | grep -q "Up"; then
    if curl -s -m 5 -o /dev/null -w "%{http_code}" http://localhost:8088 | grep -q "200\|302\|404"; then
        temporal_ui_healthy=true
    fi
fi

# Determine overall health
if [ "$backend_healthy" = false ] || [ "$pwa_healthy" = false ] || [ "$storybook_healthy" = false ] || 
   [ "$postgres_healthy" = false ] || [ "$redis_healthy" = false ] || [ "$localstack_healthy" = false ] || 
   [ "$traefik_healthy" = false ]; then
    all_healthy=false
fi

# Generate detailed summary
echo "üìä Service Status Summary:"
echo "   Backend API: $([ "$backend_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   PWA Frontend: $([ "$pwa_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Storybook: $([ "$storybook_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   PostgreSQL: $([ "$postgres_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Redis: $([ "$redis_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   LocalStack: $([ "$localstack_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Temporal Backend: $([ "$temporal_backend_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Temporal UI: $([ "$temporal_ui_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   Traefik: $([ "$traefik_healthy" = true ] && echo "‚úÖ" || echo "‚ùå")"

if [ "$all_healthy" = true ] && [ "$temporal_backend_healthy" = true ]; then
    echo "================================================="
    echo "üéâ All critical services are healthy! Development environment is ready."
    echo ""
    echo "üîó Quick Access Links:"
    echo "   PWA Frontend: http://localhost:3000"
    echo "   Storybook: http://localhost:6006"
    echo "   Backend API: http://localhost:3001/health"
    if [ "$temporal_ui_healthy" = true ]; then
        echo "   Temporal UI: http://localhost:8088"
    fi
    echo "   Traefik Dashboard: http://localhost:8080/dashboard/"
    exit 0
else
    echo "================================================="
    echo "‚ö†Ô∏è  Some services are not healthy. Check the details above."
    echo ""
    echo "üîß Troubleshooting suggestions:"
    [ "$backend_healthy" = false ] && echo "   - Backend: Check if dependencies are still installing: docker logs dice_backend"
    [ "$temporal_ui_healthy" = false ] && echo "   - Temporal UI: Try restarting: docker restart dice_temporal_ui"
    [ "$storybook_healthy" = false ] && echo "   - Storybook: Run 'cd workspace/pwa && pnpm run storybook'"
    exit 1
fi 
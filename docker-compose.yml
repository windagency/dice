services:
  # Reverse Proxy and SSL Termination
  traefik:
    image: traefik:v3.0
    container_name: dice_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.selfsigned.acme.tlschallenge=true"
      - "--certificatesresolvers.selfsigned.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/data/traefik:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.dice.local`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=selfsigned"
    networks:
      - dice_network

  # Database
  postgres:
    image: postgres:17-bullseye
    container_name: dice_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dice_db}
      POSTGRES_USER: ${POSTGRES_USER:-dice_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dice_dev_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/scripts/seed-data:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dice_user} -d ${POSTGRES_DB:-dice_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dice_network

  # Cache
  redis:
    image: redis:7-bullseye
    container_name: dice_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dice_network

  # AWS Simulation
  localstack:
    image: localstack/localstack:4.0
    container_name: dice_localstack
    restart: unless-stopped
    environment:
      SERVICES: s3,rds,dynamodb
      DEBUG: 1
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "4566:4566"
    networks:
      - dice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # AWS CLI with LocalStack support
  awscli:
    build:
      context: .
      dockerfile: Dockerfile.awscli
    container_name: dice_awscli
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566
    volumes:
      - ./scripts:/workspace/scripts
      - .:/workspace/project
    networks:
      - dice_network
    depends_on:
      localstack:
        condition: service_healthy
    profiles:
      - tools

  # Backend Service
  backend:
    build:
      context: ./workspace/backend
      dockerfile: Dockerfile
    container_name: dice_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL:-postgresql://dice_user:dice_dev_password_2024@postgres:5432/dice_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-dice_jwt_secret_development_2024}
      - PORT=3001
    volumes:
      - ./workspace/backend:/app
      - backend_node_modules:/app/node_modules
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    command: sh -c "pnpm install && pnpm run start:dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.dice.local`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=selfsigned"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
    networks:
      - dice_network

  # PWA Frontend
  pwa:
    build:
      context: ./workspace/pwa
      dockerfile: Dockerfile
    container_name: dice_pwa
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=https://api.dice.local
      - PORT=3000
    volumes:
      - ./workspace/pwa:/app
      - pwa_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    command: sh -c "pnpm install && pnpm run dev"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pwa.rule=Host(`pwa.dice.local`)"
      - "traefik.http.routers.pwa.tls=true"
      - "traefik.http.routers.pwa.tls.certresolver=selfsigned"
      - "traefik.http.services.pwa.loadbalancer.server.port=3000"
    networks:
      - dice_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  localstack_data:
    driver: local
  backend_node_modules:
    driver: local
  pwa_node_modules:
    driver: local

networks:
  dice_network:
    driver: bridge 
# Backend Development Environment
# This compose file provides all services needed for backend development
# 
# ⚠️ SECURITY WARNING: 
# - Default passwords are weak and for development only
# - Set POSTGRES_PASSWORD and JWT_SECRET environment variables for security
# - Never use default secrets in production
# 
# Run with: docker compose up -d

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_dev
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://dice_user:${POSTGRES_PASSWORD:-dice_password}@postgres:5432/dice_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - backend_node_modules:/app/node_modules
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    command: sh -c "npm install && npm run start:dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - backend_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:17-bullseye
    container_name: backend_postgres
    environment:
      - POSTGRES_DB=dice_db
      - POSTGRES_USER=dice_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dice_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dice_user -d dice_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-bullseye
    container_name: backend_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend_network
    restart: unless-stopped

  # Temporal Workflow Engine
  temporal:
    image: temporalio/auto-setup:1.24.2
    container_name: backend_temporal
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_DB=dice_db
      - POSTGRES_USER=dice_user
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-dice_password}
      - POSTGRES_SEEDS=postgres
    ports:
      - "7233-7235:7233-7235"
      - "7239:7239"
    networks:
      - backend_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Temporal UI
  temporal-ui:
    image: temporalio/ui:2.31.0
    container_name: backend_temporal_ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - "8088:8080"
    networks:
      - backend_network
    restart: unless-stopped
    depends_on:
      - temporal

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local

networks:
  backend_network:
    driver: bridge
    name: backend_network 